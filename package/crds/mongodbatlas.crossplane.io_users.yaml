---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.11.3
  creationTimestamp: null
  name: users.mongodbatlas.crossplane.io
spec:
  group: mongodbatlas.crossplane.io
  names:
    categories:
    - crossplane
    - managed
    - mongodbatlas
    kind: User
    listKind: UserList
    plural: users
    singular: user
  scope: Cluster
  versions:
  - additionalPrinterColumns:
    - jsonPath: .status.conditions[?(@.type=='Ready')].status
      name: READY
      type: string
    - jsonPath: .status.conditions[?(@.type=='Synced')].status
      name: SYNCED
      type: string
    - jsonPath: .metadata.annotations.crossplane\.io/external-name
      name: EXTERNAL-NAME
      type: string
    - jsonPath: .metadata.creationTimestamp
      name: AGE
      type: date
    name: v1alpha1
    schema:
      openAPIV3Schema:
        description: User is the Schema for the Users API. Provides a Database User
          resource.
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: UserSpec defines the desired state of User
            properties:
              deletionPolicy:
                default: Delete
                description: 'DeletionPolicy specifies what will happen to the underlying
                  external when this managed resource is deleted - either "Delete"
                  or "Orphan" the external resource. This field is planned to be deprecated
                  in favor of the ManagementPolicy field in a future release. Currently,
                  both could be set independently and non-default values would be
                  honored if the feature flag is enabled. See the design doc for more
                  information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223'
                enum:
                - Orphan
                - Delete
                type: string
              forProvider:
                properties:
                  authDatabaseName:
                    description: 'Database against which Atlas authenticates the user.
                      A user must provide both a username and authentication database
                      to log into MongoDB. Accepted values include:'
                    type: string
                  awsIamType:
                    description: 'If this value is set, the new database user authenticates
                      with AWS IAM credentials. If no value is given, Atlas uses the
                      default value of NONE. The accepted types are:'
                    type: string
                  databaseName:
                    description: Database on which the user has the specified role.
                      A role on the admin database can include privileges that apply
                      to the other databases.
                    type: string
                  labels:
                    items:
                      properties:
                        key:
                          description: The key that you want to write.
                          type: string
                        value:
                          description: The value that you want to write.
                          type: string
                      type: object
                    type: array
                  ldapAuthType:
                    description: Method by which the provided username is authenticated.
                      If no value is given, Atlas uses the default value of NONE.
                    type: string
                  oidcAuthType:
                    description: 'Human-readable label that indicates whether the
                      new database user authenticates with OIDC (OpenID Connect) federated
                      authentication. If no value is given, Atlas uses the default
                      value of NONE. The accepted types are:'
                    type: string
                  passwordSecretRef:
                    description: User's initial password. Password can be changed
                      after creation using your preferred method, e.g. via the MongoDB
                      Atlas UI, to ensure security.
                    properties:
                      key:
                        description: The key to select.
                        type: string
                      name:
                        description: Name of the secret.
                        type: string
                      namespace:
                        description: Namespace of the secret.
                        type: string
                    required:
                    - key
                    - name
                    - namespace
                    type: object
                  projectId:
                    description: The unique ID for the project to create the database
                      user.
                    type: string
                  roles:
                    description: List of userâ€™s roles and the databases / collections
                      on which the roles apply. A role allows the user to perform
                      particular actions on the specified database. A role on the
                      admin database can include privileges that apply to the other
                      databases as well. See Roles below for more details.
                    items:
                      properties:
                        collectionName:
                          description: Collection for which the role applies. You
                            can specify a collection for the read and readWrite roles.
                            If you do not specify a collection for read and readWrite,
                            the role applies to all collections in the database (excluding
                            some collections in the system. database).
                          type: string
                        databaseName:
                          description: Database on which the user has the specified
                            role. A role on the admin database can include privileges
                            that apply to the other databases.
                          type: string
                        roleName:
                          description: Name of the role to grant. See Create a Database
                            User roles.roleName for valid values and restrictions.
                          type: string
                      type: object
                    type: array
                  scopes:
                    items:
                      properties:
                        name:
                          description: Name of the cluster or Atlas Data Lake that
                            the user has access to.
                          type: string
                        type:
                          description: 'Type of resource that the user has access
                            to. Valid values are: CLUSTER and DATA_LAKE'
                          type: string
                      type: object
                    type: array
                  username:
                    description: Username for authenticating to MongoDB. USER_ARN
                      or ROLE_ARN if aws_iam_type is USER or ROLE.
                    type: string
                  x509Type:
                    description: 'X.509 method by which the provided username is authenticated.
                      If no value is given, Atlas uses the default value of NONE.
                      The accepted types are:'
                    type: string
                type: object
              managementPolicy:
                default: FullControl
                description: 'THIS IS AN ALPHA FIELD. Do not use it in production.
                  It is not honored unless the relevant Crossplane feature flag is
                  enabled, and may be changed or removed without notice. ManagementPolicy
                  specifies the level of control Crossplane has over the managed external
                  resource. This field is planned to replace the DeletionPolicy field
                  in a future release. Currently, both could be set independently
                  and non-default values would be honored if the feature flag is enabled.
                  See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223'
                enum:
                - FullControl
                - ObserveOnly
                - OrphanOnDelete
                type: string
              providerConfigRef:
                default:
                  name: default
                description: ProviderConfigReference specifies how the provider that
                  will be used to create, observe, update, and delete this managed
                  resource should be configured.
                properties:
                  name:
                    description: Name of the referenced object.
                    type: string
                  policy:
                    description: Policies for referencing.
                    properties:
                      resolution:
                        default: Required
                        description: Resolution specifies whether resolution of this
                          reference is required. The default is 'Required', which
                          means the reconcile will fail if the reference cannot be
                          resolved. 'Optional' means this reference will be a no-op
                          if it cannot be resolved.
                        enum:
                        - Required
                        - Optional
                        type: string
                      resolve:
                        description: Resolve specifies when this reference should
                          be resolved. The default is 'IfNotPresent', which will attempt
                          to resolve the reference only when the corresponding field
                          is not present. Use 'Always' to resolve the reference on
                          every reconcile.
                        enum:
                        - Always
                        - IfNotPresent
                        type: string
                    type: object
                required:
                - name
                type: object
              providerRef:
                description: 'ProviderReference specifies the provider that will be
                  used to create, observe, update, and delete this managed resource.
                  Deprecated: Please use ProviderConfigReference, i.e. `providerConfigRef`'
                properties:
                  name:
                    description: Name of the referenced object.
                    type: string
                  policy:
                    description: Policies for referencing.
                    properties:
                      resolution:
                        default: Required
                        description: Resolution specifies whether resolution of this
                          reference is required. The default is 'Required', which
                          means the reconcile will fail if the reference cannot be
                          resolved. 'Optional' means this reference will be a no-op
                          if it cannot be resolved.
                        enum:
                        - Required
                        - Optional
                        type: string
                      resolve:
                        description: Resolve specifies when this reference should
                          be resolved. The default is 'IfNotPresent', which will attempt
                          to resolve the reference only when the corresponding field
                          is not present. Use 'Always' to resolve the reference on
                          every reconcile.
                        enum:
                        - Always
                        - IfNotPresent
                        type: string
                    type: object
                required:
                - name
                type: object
              publishConnectionDetailsTo:
                description: PublishConnectionDetailsTo specifies the connection secret
                  config which contains a name, metadata and a reference to secret
                  store config to which any connection details for this managed resource
                  should be written. Connection details frequently include the endpoint,
                  username, and password required to connect to the managed resource.
                properties:
                  configRef:
                    default:
                      name: default
                    description: SecretStoreConfigRef specifies which secret store
                      config should be used for this ConnectionSecret.
                    properties:
                      name:
                        description: Name of the referenced object.
                        type: string
                      policy:
                        description: Policies for referencing.
                        properties:
                          resolution:
                            default: Required
                            description: Resolution specifies whether resolution of
                              this reference is required. The default is 'Required',
                              which means the reconcile will fail if the reference
                              cannot be resolved. 'Optional' means this reference
                              will be a no-op if it cannot be resolved.
                            enum:
                            - Required
                            - Optional
                            type: string
                          resolve:
                            description: Resolve specifies when this reference should
                              be resolved. The default is 'IfNotPresent', which will
                              attempt to resolve the reference only when the corresponding
                              field is not present. Use 'Always' to resolve the reference
                              on every reconcile.
                            enum:
                            - Always
                            - IfNotPresent
                            type: string
                        type: object
                    required:
                    - name
                    type: object
                  metadata:
                    description: Metadata is the metadata for connection secret.
                    properties:
                      annotations:
                        additionalProperties:
                          type: string
                        description: Annotations are the annotations to be added to
                          connection secret. - For Kubernetes secrets, this will be
                          used as "metadata.annotations". - It is up to Secret Store
                          implementation for others store types.
                        type: object
                      labels:
                        additionalProperties:
                          type: string
                        description: Labels are the labels/tags to be added to connection
                          secret. - For Kubernetes secrets, this will be used as "metadata.labels".
                          - It is up to Secret Store implementation for others store
                          types.
                        type: object
                      type:
                        description: Type is the SecretType for the connection secret.
                          - Only valid for Kubernetes Secret Stores.
                        type: string
                    type: object
                  name:
                    description: Name is the name of the connection secret.
                    type: string
                required:
                - name
                type: object
              writeConnectionSecretToRef:
                description: WriteConnectionSecretToReference specifies the namespace
                  and name of a Secret to which any connection details for this managed
                  resource should be written. Connection details frequently include
                  the endpoint, username, and password required to connect to the
                  managed resource. This field is planned to be replaced in a future
                  release in favor of PublishConnectionDetailsTo. Currently, both
                  could be set independently and connection details would be published
                  to both without affecting each other.
                properties:
                  name:
                    description: Name of the secret.
                    type: string
                  namespace:
                    description: Namespace of the secret.
                    type: string
                required:
                - name
                - namespace
                type: object
            required:
            - forProvider
            type: object
            x-kubernetes-validations:
            - message: projectId is a required parameter
              rule: self.managementPolicy == 'ObserveOnly' || has(self.forProvider.projectId)
            - message: roles is a required parameter
              rule: self.managementPolicy == 'ObserveOnly' || has(self.forProvider.roles)
            - message: username is a required parameter
              rule: self.managementPolicy == 'ObserveOnly' || has(self.forProvider.username)
          status:
            description: UserStatus defines the observed state of User.
            properties:
              atProvider:
                properties:
                  authDatabaseName:
                    description: 'Database against which Atlas authenticates the user.
                      A user must provide both a username and authentication database
                      to log into MongoDB. Accepted values include:'
                    type: string
                  awsIamType:
                    description: 'If this value is set, the new database user authenticates
                      with AWS IAM credentials. If no value is given, Atlas uses the
                      default value of NONE. The accepted types are:'
                    type: string
                  databaseName:
                    description: Database on which the user has the specified role.
                      A role on the admin database can include privileges that apply
                      to the other databases.
                    type: string
                  id:
                    description: The database user's name.
                    type: string
                  labels:
                    items:
                      properties:
                        key:
                          description: The key that you want to write.
                          type: string
                        value:
                          description: The value that you want to write.
                          type: string
                      type: object
                    type: array
                  ldapAuthType:
                    description: Method by which the provided username is authenticated.
                      If no value is given, Atlas uses the default value of NONE.
                    type: string
                  oidcAuthType:
                    description: 'Human-readable label that indicates whether the
                      new database user authenticates with OIDC (OpenID Connect) federated
                      authentication. If no value is given, Atlas uses the default
                      value of NONE. The accepted types are:'
                    type: string
                  projectId:
                    description: The unique ID for the project to create the database
                      user.
                    type: string
                  roles:
                    description: List of userâ€™s roles and the databases / collections
                      on which the roles apply. A role allows the user to perform
                      particular actions on the specified database. A role on the
                      admin database can include privileges that apply to the other
                      databases as well. See Roles below for more details.
                    items:
                      properties:
                        collectionName:
                          description: Collection for which the role applies. You
                            can specify a collection for the read and readWrite roles.
                            If you do not specify a collection for read and readWrite,
                            the role applies to all collections in the database (excluding
                            some collections in the system. database).
                          type: string
                        databaseName:
                          description: Database on which the user has the specified
                            role. A role on the admin database can include privileges
                            that apply to the other databases.
                          type: string
                        roleName:
                          description: Name of the role to grant. See Create a Database
                            User roles.roleName for valid values and restrictions.
                          type: string
                      type: object
                    type: array
                  scopes:
                    items:
                      properties:
                        name:
                          description: Name of the cluster or Atlas Data Lake that
                            the user has access to.
                          type: string
                        type:
                          description: 'Type of resource that the user has access
                            to. Valid values are: CLUSTER and DATA_LAKE'
                          type: string
                      type: object
                    type: array
                  username:
                    description: Username for authenticating to MongoDB. USER_ARN
                      or ROLE_ARN if aws_iam_type is USER or ROLE.
                    type: string
                  x509Type:
                    description: 'X.509 method by which the provided username is authenticated.
                      If no value is given, Atlas uses the default value of NONE.
                      The accepted types are:'
                    type: string
                type: object
              conditions:
                description: Conditions of the resource.
                items:
                  description: A Condition that may apply to a resource.
                  properties:
                    lastTransitionTime:
                      description: LastTransitionTime is the last time this condition
                        transitioned from one status to another.
                      format: date-time
                      type: string
                    message:
                      description: A Message containing details about this condition's
                        last transition from one status to another, if any.
                      type: string
                    reason:
                      description: A Reason for this condition's last transition from
                        one status to another.
                      type: string
                    status:
                      description: Status of this condition; is it currently True,
                        False, or Unknown?
                      type: string
                    type:
                      description: Type of this condition. At most one of each condition
                        type may apply to a resource at any point in time.
                      type: string
                  required:
                  - lastTransitionTime
                  - reason
                  - status
                  - type
                  type: object
                type: array
            type: object
        required:
        - spec
        type: object
    served: true
    storage: true
    subresources:
      status: {}
