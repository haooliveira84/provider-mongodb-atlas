---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.11.3
  creationTimestamp: null
  name: backupsnapshots.snapshot.mongodbatlas.crossplane.io
spec:
  group: snapshot.mongodbatlas.crossplane.io
  names:
    categories:
    - crossplane
    - managed
    - mongodbatlas
    kind: BackupSnapshot
    listKind: BackupSnapshotList
    plural: backupsnapshots
    singular: backupsnapshot
  scope: Cluster
  versions:
  - additionalPrinterColumns:
    - jsonPath: .status.conditions[?(@.type=='Ready')].status
      name: READY
      type: string
    - jsonPath: .status.conditions[?(@.type=='Synced')].status
      name: SYNCED
      type: string
    - jsonPath: .metadata.annotations.crossplane\.io/external-name
      name: EXTERNAL-NAME
      type: string
    - jsonPath: .metadata.creationTimestamp
      name: AGE
      type: date
    name: v1alpha1
    schema:
      openAPIV3Schema:
        description: BackupSnapshot is the Schema for the BackupSnapshots API. Provides
          a Cloud Backup Snapshot resource.
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: BackupSnapshotSpec defines the desired state of BackupSnapshot
            properties:
              deletionPolicy:
                default: Delete
                description: 'DeletionPolicy specifies what will happen to the underlying
                  external when this managed resource is deleted - either "Delete"
                  or "Orphan" the external resource. This field is planned to be deprecated
                  in favor of the ManagementPolicy field in a future release. Currently,
                  both could be set independently and non-default values would be
                  honored if the feature flag is enabled. See the design doc for more
                  information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223'
                enum:
                - Orphan
                - Delete
                type: string
              forProvider:
                properties:
                  clusterName:
                    description: The name of the Atlas cluster that contains the snapshots
                      you want to retrieve.
                    type: string
                  description:
                    description: Description of the on-demand snapshot.
                    type: string
                  projectId:
                    description: The unique identifier of the project for the Atlas
                      cluster.
                    type: string
                  retentionInDays:
                    description: The number of days that Atlas should retain the on-demand
                      snapshot. Must be at least 1.
                    type: number
                type: object
              managementPolicy:
                default: FullControl
                description: 'THIS IS AN ALPHA FIELD. Do not use it in production.
                  It is not honored unless the relevant Crossplane feature flag is
                  enabled, and may be changed or removed without notice. ManagementPolicy
                  specifies the level of control Crossplane has over the managed external
                  resource. This field is planned to replace the DeletionPolicy field
                  in a future release. Currently, both could be set independently
                  and non-default values would be honored if the feature flag is enabled.
                  See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223'
                enum:
                - FullControl
                - ObserveOnly
                - OrphanOnDelete
                type: string
              providerConfigRef:
                default:
                  name: default
                description: ProviderConfigReference specifies how the provider that
                  will be used to create, observe, update, and delete this managed
                  resource should be configured.
                properties:
                  name:
                    description: Name of the referenced object.
                    type: string
                  policy:
                    description: Policies for referencing.
                    properties:
                      resolution:
                        default: Required
                        description: Resolution specifies whether resolution of this
                          reference is required. The default is 'Required', which
                          means the reconcile will fail if the reference cannot be
                          resolved. 'Optional' means this reference will be a no-op
                          if it cannot be resolved.
                        enum:
                        - Required
                        - Optional
                        type: string
                      resolve:
                        description: Resolve specifies when this reference should
                          be resolved. The default is 'IfNotPresent', which will attempt
                          to resolve the reference only when the corresponding field
                          is not present. Use 'Always' to resolve the reference on
                          every reconcile.
                        enum:
                        - Always
                        - IfNotPresent
                        type: string
                    type: object
                required:
                - name
                type: object
              providerRef:
                description: 'ProviderReference specifies the provider that will be
                  used to create, observe, update, and delete this managed resource.
                  Deprecated: Please use ProviderConfigReference, i.e. `providerConfigRef`'
                properties:
                  name:
                    description: Name of the referenced object.
                    type: string
                  policy:
                    description: Policies for referencing.
                    properties:
                      resolution:
                        default: Required
                        description: Resolution specifies whether resolution of this
                          reference is required. The default is 'Required', which
                          means the reconcile will fail if the reference cannot be
                          resolved. 'Optional' means this reference will be a no-op
                          if it cannot be resolved.
                        enum:
                        - Required
                        - Optional
                        type: string
                      resolve:
                        description: Resolve specifies when this reference should
                          be resolved. The default is 'IfNotPresent', which will attempt
                          to resolve the reference only when the corresponding field
                          is not present. Use 'Always' to resolve the reference on
                          every reconcile.
                        enum:
                        - Always
                        - IfNotPresent
                        type: string
                    type: object
                required:
                - name
                type: object
              publishConnectionDetailsTo:
                description: PublishConnectionDetailsTo specifies the connection secret
                  config which contains a name, metadata and a reference to secret
                  store config to which any connection details for this managed resource
                  should be written. Connection details frequently include the endpoint,
                  username, and password required to connect to the managed resource.
                properties:
                  configRef:
                    default:
                      name: default
                    description: SecretStoreConfigRef specifies which secret store
                      config should be used for this ConnectionSecret.
                    properties:
                      name:
                        description: Name of the referenced object.
                        type: string
                      policy:
                        description: Policies for referencing.
                        properties:
                          resolution:
                            default: Required
                            description: Resolution specifies whether resolution of
                              this reference is required. The default is 'Required',
                              which means the reconcile will fail if the reference
                              cannot be resolved. 'Optional' means this reference
                              will be a no-op if it cannot be resolved.
                            enum:
                            - Required
                            - Optional
                            type: string
                          resolve:
                            description: Resolve specifies when this reference should
                              be resolved. The default is 'IfNotPresent', which will
                              attempt to resolve the reference only when the corresponding
                              field is not present. Use 'Always' to resolve the reference
                              on every reconcile.
                            enum:
                            - Always
                            - IfNotPresent
                            type: string
                        type: object
                    required:
                    - name
                    type: object
                  metadata:
                    description: Metadata is the metadata for connection secret.
                    properties:
                      annotations:
                        additionalProperties:
                          type: string
                        description: Annotations are the annotations to be added to
                          connection secret. - For Kubernetes secrets, this will be
                          used as "metadata.annotations". - It is up to Secret Store
                          implementation for others store types.
                        type: object
                      labels:
                        additionalProperties:
                          type: string
                        description: Labels are the labels/tags to be added to connection
                          secret. - For Kubernetes secrets, this will be used as "metadata.labels".
                          - It is up to Secret Store implementation for others store
                          types.
                        type: object
                      type:
                        description: Type is the SecretType for the connection secret.
                          - Only valid for Kubernetes Secret Stores.
                        type: string
                    type: object
                  name:
                    description: Name is the name of the connection secret.
                    type: string
                required:
                - name
                type: object
              writeConnectionSecretToRef:
                description: WriteConnectionSecretToReference specifies the namespace
                  and name of a Secret to which any connection details for this managed
                  resource should be written. Connection details frequently include
                  the endpoint, username, and password required to connect to the
                  managed resource. This field is planned to be replaced in a future
                  release in favor of PublishConnectionDetailsTo. Currently, both
                  could be set independently and connection details would be published
                  to both without affecting each other.
                properties:
                  name:
                    description: Name of the secret.
                    type: string
                  namespace:
                    description: Namespace of the secret.
                    type: string
                required:
                - name
                - namespace
                type: object
            required:
            - forProvider
            type: object
            x-kubernetes-validations:
            - message: clusterName is a required parameter
              rule: self.managementPolicy == 'ObserveOnly' || has(self.forProvider.clusterName)
            - message: description is a required parameter
              rule: self.managementPolicy == 'ObserveOnly' || has(self.forProvider.description)
            - message: projectId is a required parameter
              rule: self.managementPolicy == 'ObserveOnly' || has(self.forProvider.projectId)
            - message: retentionInDays is a required parameter
              rule: self.managementPolicy == 'ObserveOnly' || has(self.forProvider.retentionInDays)
          status:
            description: BackupSnapshotStatus defines the observed state of BackupSnapshot.
            properties:
              atProvider:
                properties:
                  cloudProvider:
                    description: Cloud provider that stores this snapshot. Atlas returns
                      this parameter when type is replicaSet.
                    type: string
                  clusterName:
                    description: The name of the Atlas cluster that contains the snapshots
                      you want to retrieve.
                    type: string
                  createdAt:
                    description: UTC ISO 8601 formatted point in time when Atlas took
                      the snapshot.
                    type: string
                  description:
                    description: Description of the on-demand snapshot.
                    type: string
                  expiresAt:
                    description: UTC ISO 8601 formatted point in time when Atlas will
                      delete the snapshot.
                    type: string
                  id:
                    type: string
                  masterKeyUuid:
                    description: Unique ID of the AWS KMS Customer Master Key used
                      to encrypt the snapshot. Only visible for clusters using Encryption
                      at Rest via Customer KMS.
                    type: string
                  members:
                    description: Block of List of snapshots and the cloud provider
                      where the snapshots are stored. Atlas returns this parameter
                      when type is shardedCluster. See below
                    items:
                      properties:
                        cloudProvider:
                          description: Cloud provider that stores this snapshot.
                          type: string
                        id:
                          description: Unique identifier for the sharded cluster snapshot.
                          type: string
                        replicaSetName:
                          description: Label given to a shard or config server from
                            which Atlas took this snapshot.
                          type: string
                      type: object
                    type: array
                  mongodVersion:
                    description: Version of the MongoDB server.
                    type: string
                  projectId:
                    description: The unique identifier of the project for the Atlas
                      cluster.
                    type: string
                  replicaSetName:
                    description: Label given to the replica set from which Atlas took
                      this snapshot. Atlas returns this parameter when type is replicaSet.
                    type: string
                  retentionInDays:
                    description: The number of days that Atlas should retain the on-demand
                      snapshot. Must be at least 1.
                    type: number
                  snapshotId:
                    description: Unique identifier of the snapshot.
                    type: string
                  snapshotIds:
                    description: Unique identifiers of the snapshots created for the
                      shards and config server for a sharded cluster. Atlas returns
                      this parameter when type is shardedCluster. These identifiers
                      should match those given in the members[n].id parameters. This
                      allows you to map a snapshot to its shard or config server name.
                    items:
                      type: string
                    type: array
                  snapshotType:
                    description: Specified the type of snapshot. Valid values are
                      onDemand and scheduled.
                    type: string
                  status:
                    description: 'Current status of the snapshot. One of the following
                      values will be returned: queued, inProgress, completed, failed.'
                    type: string
                  storageSizeBytes:
                    description: Specifies the size of the snapshot in bytes.
                    type: number
                  type:
                    description: 'Specifies the type of cluster: replicaSet or shardedCluster.'
                    type: string
                type: object
              conditions:
                description: Conditions of the resource.
                items:
                  description: A Condition that may apply to a resource.
                  properties:
                    lastTransitionTime:
                      description: LastTransitionTime is the last time this condition
                        transitioned from one status to another.
                      format: date-time
                      type: string
                    message:
                      description: A Message containing details about this condition's
                        last transition from one status to another, if any.
                      type: string
                    reason:
                      description: A Reason for this condition's last transition from
                        one status to another.
                      type: string
                    status:
                      description: Status of this condition; is it currently True,
                        False, or Unknown?
                      type: string
                    type:
                      description: Type of this condition. At most one of each condition
                        type may apply to a resource at any point in time.
                      type: string
                  required:
                  - lastTransitionTime
                  - reason
                  - status
                  - type
                  type: object
                type: array
            type: object
        required:
        - spec
        type: object
    served: true
    storage: true
    subresources:
      status: {}
