/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AwsObservation struct {
	IAMAssumedRoleArn *string `json:"iamAssumedRoleArn,omitempty" tf:"iam_assumed_role_arn,omitempty"`
}

type AwsParameters struct {

	// +kubebuilder:validation:Required
	IAMAssumedRoleArn *string `json:"iamAssumedRoleArn" tf:"iam_assumed_role_arn,omitempty"`
}

type AzureObservation struct {
	AtlasAzureAppID *string `json:"atlasAzureAppId,omitempty" tf:"atlas_azure_app_id,omitempty"`

	ServicePrincipalID *string `json:"servicePrincipalId,omitempty" tf:"service_principal_id,omitempty"`

	TenantID *string `json:"tenantId,omitempty" tf:"tenant_id,omitempty"`
}

type AzureParameters struct {

	// +kubebuilder:validation:Required
	AtlasAzureAppID *string `json:"atlasAzureAppId" tf:"atlas_azure_app_id,omitempty"`

	// +kubebuilder:validation:Required
	ServicePrincipalID *string `json:"servicePrincipalId" tf:"service_principal_id,omitempty"`

	// +kubebuilder:validation:Required
	TenantID *string `json:"tenantId" tf:"tenant_id,omitempty"`
}

type ProviderAccessAuthorizationFeatureUsagesObservation struct {
	FeatureID map[string]*string `json:"featureId,omitempty" tf:"feature_id,omitempty"`

	FeatureType *string `json:"featureType,omitempty" tf:"feature_type,omitempty"`
}

type ProviderAccessAuthorizationFeatureUsagesParameters struct {
}

type ProviderAccessAuthorizationObservation struct {
	AuthorizedDate *string `json:"authorizedDate,omitempty" tf:"authorized_date,omitempty"`

	Aws []AwsObservation `json:"aws,omitempty" tf:"aws,omitempty"`

	Azure []AzureObservation `json:"azure,omitempty" tf:"azure,omitempty"`

	FeatureUsages []ProviderAccessAuthorizationFeatureUsagesObservation `json:"featureUsages,omitempty" tf:"feature_usages,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	RoleID *string `json:"roleId,omitempty" tf:"role_id,omitempty"`
}

type ProviderAccessAuthorizationParameters struct {

	// +kubebuilder:validation:Optional
	Aws []AwsParameters `json:"aws,omitempty" tf:"aws,omitempty"`

	// +kubebuilder:validation:Optional
	Azure []AzureParameters `json:"azure,omitempty" tf:"azure,omitempty"`

	// +kubebuilder:validation:Optional
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// +kubebuilder:validation:Optional
	RoleID *string `json:"roleId,omitempty" tf:"role_id,omitempty"`
}

// ProviderAccessAuthorizationSpec defines the desired state of ProviderAccessAuthorization
type ProviderAccessAuthorizationSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ProviderAccessAuthorizationParameters `json:"forProvider"`
}

// ProviderAccessAuthorizationStatus defines the observed state of ProviderAccessAuthorization.
type ProviderAccessAuthorizationStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ProviderAccessAuthorizationObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ProviderAccessAuthorization is the Schema for the ProviderAccessAuthorizations API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,mongodbatlas}
type ProviderAccessAuthorization struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.projectId)",message="projectId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.roleId)",message="roleId is a required parameter"
	Spec   ProviderAccessAuthorizationSpec   `json:"spec"`
	Status ProviderAccessAuthorizationStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ProviderAccessAuthorizationList contains a list of ProviderAccessAuthorizations
type ProviderAccessAuthorizationList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ProviderAccessAuthorization `json:"items"`
}

// Repository type metadata.
var (
	ProviderAccessAuthorization_Kind             = "ProviderAccessAuthorization"
	ProviderAccessAuthorization_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ProviderAccessAuthorization_Kind}.String()
	ProviderAccessAuthorization_KindAPIVersion   = ProviderAccessAuthorization_Kind + "." + CRDGroupVersion.String()
	ProviderAccessAuthorization_GroupVersionKind = CRDGroupVersion.WithKind(ProviderAccessAuthorization_Kind)
)

func init() {
	SchemeBuilder.Register(&ProviderAccessAuthorization{}, &ProviderAccessAuthorizationList{})
}
