/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AwsConfigObservation struct {

	// Unique external ID Atlas uses when assuming the IAM role in your AWS account.
	AtlasAssumedRoleExternalID *string `json:"atlasAssumedRoleExternalId,omitempty" tf:"atlas_assumed_role_external_id,omitempty"`

	// ARN associated with the Atlas AWS account used to assume IAM roles in your AWS account.
	AtlasAwsAccountArn *string `json:"atlasAwsAccountArn,omitempty" tf:"atlas_aws_account_arn,omitempty"`
}

type AwsConfigParameters struct {
}

type AzureConfigObservation struct {

	// Azure Active Directory Application ID of Atlas. This property is required when provider_name = "AZURE".
	AtlasAzureAppID *string `json:"atlasAzureAppId,omitempty" tf:"atlas_azure_app_id,omitempty"`

	// UUID string that identifies the Azure Service Principal. This property is required when provider_name = "AZURE".
	ServicePrincipalID *string `json:"servicePrincipalId,omitempty" tf:"service_principal_id,omitempty"`

	// UUID String that identifies the Azure Active Directory Tenant ID. This property is required when provider_name = "AZURE".
	TenantID *string `json:"tenantId,omitempty" tf:"tenant_id,omitempty"`
}

type AzureConfigParameters struct {

	// Azure Active Directory Application ID of Atlas. This property is required when provider_name = "AZURE".
	// +kubebuilder:validation:Required
	AtlasAzureAppID *string `json:"atlasAzureAppId" tf:"atlas_azure_app_id,omitempty"`

	// UUID string that identifies the Azure Service Principal. This property is required when provider_name = "AZURE".
	// +kubebuilder:validation:Required
	ServicePrincipalID *string `json:"servicePrincipalId" tf:"service_principal_id,omitempty"`

	// UUID String that identifies the Azure Active Directory Tenant ID. This property is required when provider_name = "AZURE".
	// +kubebuilder:validation:Required
	TenantID *string `json:"tenantId" tf:"tenant_id,omitempty"`
}

type ProviderAccessSetupObservation struct {
	Aws map[string]*string `json:"aws,omitempty" tf:"aws,omitempty"`

	// aws related arn roles
	AwsConfig []AwsConfigObservation `json:"awsConfig,omitempty" tf:"aws_config,omitempty"`

	// azure related configurations
	AzureConfig []AzureConfigObservation `json:"azureConfig,omitempty" tf:"azure_config,omitempty"`

	// Date on which this role was created.
	CreatedDate *string `json:"createdDate,omitempty" tf:"created_date,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Date and time when this Azure Service Principal was last updated. This parameter expresses its value in the ISO 8601 timestamp format in UTC.
	LastUpdatedDate *string `json:"lastUpdatedDate,omitempty" tf:"last_updated_date,omitempty"`

	// The unique ID for the project
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// The cloud provider for which to create a new role. Currently only AWS and AZURE are supported. WARNING Changing the `provider_name`` will result in destruction of the existing resource and the creation of a new resource.
	ProviderName *string `json:"providerName,omitempty" tf:"provider_name,omitempty"`

	// Unique ID of this role.
	RoleID *string `json:"roleId,omitempty" tf:"role_id,omitempty"`
}

type ProviderAccessSetupParameters struct {

	// azure related configurations
	// +kubebuilder:validation:Optional
	AzureConfig []AzureConfigParameters `json:"azureConfig,omitempty" tf:"azure_config,omitempty"`

	// The unique ID for the project
	// +kubebuilder:validation:Optional
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// The cloud provider for which to create a new role. Currently only AWS and AZURE are supported. WARNING Changing the `provider_name`` will result in destruction of the existing resource and the creation of a new resource.
	// +kubebuilder:validation:Optional
	ProviderName *string `json:"providerName,omitempty" tf:"provider_name,omitempty"`
}

// ProviderAccessSetupSpec defines the desired state of ProviderAccessSetup
type ProviderAccessSetupSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ProviderAccessSetupParameters `json:"forProvider"`
}

// ProviderAccessSetupStatus defines the observed state of ProviderAccessSetup.
type ProviderAccessSetupStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ProviderAccessSetupObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ProviderAccessSetup is the Schema for the ProviderAccessSetups API. Provides a Cloud Provider Access settings resource for registration, authorization, and deauthorization
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,mongodbatlas}
type ProviderAccessSetup struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.projectId)",message="projectId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.providerName)",message="providerName is a required parameter"
	Spec   ProviderAccessSetupSpec   `json:"spec"`
	Status ProviderAccessSetupStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ProviderAccessSetupList contains a list of ProviderAccessSetups
type ProviderAccessSetupList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ProviderAccessSetup `json:"items"`
}

// Repository type metadata.
var (
	ProviderAccessSetup_Kind             = "ProviderAccessSetup"
	ProviderAccessSetup_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ProviderAccessSetup_Kind}.String()
	ProviderAccessSetup_KindAPIVersion   = ProviderAccessSetup_Kind + "." + CRDGroupVersion.String()
	ProviderAccessSetup_GroupVersionKind = CRDGroupVersion.WithKind(ProviderAccessSetup_Kind)
)

func init() {
	SchemeBuilder.Register(&ProviderAccessSetup{}, &ProviderAccessSetupList{})
}
