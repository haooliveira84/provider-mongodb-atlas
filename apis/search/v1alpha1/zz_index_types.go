/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type IndexObservation struct {
	Analyzer *string `json:"analyzer,omitempty" tf:"analyzer,omitempty"`

	Analyzers *string `json:"analyzers,omitempty" tf:"analyzers,omitempty"`

	ClusterName *string `json:"clusterName,omitempty" tf:"cluster_name,omitempty"`

	CollectionName *string `json:"collectionName,omitempty" tf:"collection_name,omitempty"`

	Database *string `json:"database,omitempty" tf:"database,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	IndexID *string `json:"indexId,omitempty" tf:"index_id,omitempty"`

	MappingsDynamic *bool `json:"mappingsDynamic,omitempty" tf:"mappings_dynamic,omitempty"`

	MappingsFields *string `json:"mappingsFields,omitempty" tf:"mappings_fields,omitempty"`

	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	SearchAnalyzer *string `json:"searchAnalyzer,omitempty" tf:"search_analyzer,omitempty"`

	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	Synonyms []SynonymsObservation `json:"synonyms,omitempty" tf:"synonyms,omitempty"`

	WaitForIndexBuildCompletion *bool `json:"waitForIndexBuildCompletion,omitempty" tf:"wait_for_index_build_completion,omitempty"`
}

type IndexParameters struct {

	// +kubebuilder:validation:Optional
	Analyzer *string `json:"analyzer,omitempty" tf:"analyzer,omitempty"`

	// +kubebuilder:validation:Optional
	Analyzers *string `json:"analyzers,omitempty" tf:"analyzers,omitempty"`

	// +kubebuilder:validation:Optional
	ClusterName *string `json:"clusterName,omitempty" tf:"cluster_name,omitempty"`

	// +kubebuilder:validation:Optional
	CollectionName *string `json:"collectionName,omitempty" tf:"collection_name,omitempty"`

	// +kubebuilder:validation:Optional
	Database *string `json:"database,omitempty" tf:"database,omitempty"`

	// +kubebuilder:validation:Optional
	MappingsDynamic *bool `json:"mappingsDynamic,omitempty" tf:"mappings_dynamic,omitempty"`

	// +kubebuilder:validation:Optional
	MappingsFields *string `json:"mappingsFields,omitempty" tf:"mappings_fields,omitempty"`

	// +kubebuilder:validation:Optional
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// +kubebuilder:validation:Optional
	SearchAnalyzer *string `json:"searchAnalyzer,omitempty" tf:"search_analyzer,omitempty"`

	// +kubebuilder:validation:Optional
	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	// +kubebuilder:validation:Optional
	Synonyms []SynonymsParameters `json:"synonyms,omitempty" tf:"synonyms,omitempty"`

	// +kubebuilder:validation:Optional
	WaitForIndexBuildCompletion *bool `json:"waitForIndexBuildCompletion,omitempty" tf:"wait_for_index_build_completion,omitempty"`
}

type SynonymsObservation struct {
	Analyzer *string `json:"analyzer,omitempty" tf:"analyzer,omitempty"`

	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	SourceCollection *string `json:"sourceCollection,omitempty" tf:"source_collection,omitempty"`
}

type SynonymsParameters struct {

	// +kubebuilder:validation:Required
	Analyzer *string `json:"analyzer" tf:"analyzer,omitempty"`

	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// +kubebuilder:validation:Required
	SourceCollection *string `json:"sourceCollection" tf:"source_collection,omitempty"`
}

// IndexSpec defines the desired state of Index
type IndexSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     IndexParameters `json:"forProvider"`
}

// IndexStatus defines the observed state of Index.
type IndexStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        IndexObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Index is the Schema for the Indexs API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,mongodbatlas}
type Index struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.clusterName)",message="clusterName is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.collectionName)",message="collectionName is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.database)",message="database is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.projectId)",message="projectId is a required parameter"
	Spec   IndexSpec   `json:"spec"`
	Status IndexStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// IndexList contains a list of Indexs
type IndexList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Index `json:"items"`
}

// Repository type metadata.
var (
	Index_Kind             = "Index"
	Index_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Index_Kind}.String()
	Index_KindAPIVersion   = Index_Kind + "." + CRDGroupVersion.String()
	Index_GroupVersionKind = CRDGroupVersion.WithKind(Index_Kind)
)

func init() {
	SchemeBuilder.Register(&Index{}, &IndexList{})
}
