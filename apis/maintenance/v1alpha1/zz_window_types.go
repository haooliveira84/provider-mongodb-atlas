/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type WindowObservation struct {

	// Defer any scheduled maintenance for the given project for one week.
	AutoDefer *bool `json:"autoDefer,omitempty" tf:"auto_defer,omitempty"`

	// Flag that indicates whether you want to defer all maintenance windows one week they would be triggered.
	AutoDeferOnceEnabled *bool `json:"autoDeferOnceEnabled,omitempty" tf:"auto_defer_once_enabled,omitempty"`

	// Day of the week when you would like the maintenance window to start as a 1-based integer: S=1, M=2, T=3, W=4, T=5, F=6, S=7.
	DayOfWeek *float64 `json:"dayOfWeek,omitempty" tf:"day_of_week,omitempty"`

	// Defer the next scheduled maintenance for the given project for one week.
	Defer *bool `json:"defer,omitempty" tf:"defer,omitempty"`

	// Hour of the day when you would like the maintenance window to start. This parameter uses the 24-hour clock, where midnight is 0, noon is 12 (Time zone is UTC).
	HourOfDay *float64 `json:"hourOfDay,omitempty" tf:"hour_of_day,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Number of times the current maintenance event for this project has been deferred, you can set a maximum of 2 deferrals.
	NumberOfDeferrals *float64 `json:"numberOfDeferrals,omitempty" tf:"number_of_deferrals,omitempty"`

	// The unique identifier of the project for the Maintenance Window.
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// Flag indicating whether project maintenance has been directed to start immediately. If you request that maintenance begin immediately, this field returns true from the time the request was made until the time the maintenance event completes.
	StartAsap *bool `json:"startAsap,omitempty" tf:"start_asap,omitempty"`
}

type WindowParameters struct {

	// Defer any scheduled maintenance for the given project for one week.
	// +kubebuilder:validation:Optional
	AutoDefer *bool `json:"autoDefer,omitempty" tf:"auto_defer,omitempty"`

	// Flag that indicates whether you want to defer all maintenance windows one week they would be triggered.
	// +kubebuilder:validation:Optional
	AutoDeferOnceEnabled *bool `json:"autoDeferOnceEnabled,omitempty" tf:"auto_defer_once_enabled,omitempty"`

	// Day of the week when you would like the maintenance window to start as a 1-based integer: S=1, M=2, T=3, W=4, T=5, F=6, S=7.
	// +kubebuilder:validation:Optional
	DayOfWeek *float64 `json:"dayOfWeek,omitempty" tf:"day_of_week,omitempty"`

	// Defer the next scheduled maintenance for the given project for one week.
	// +kubebuilder:validation:Optional
	Defer *bool `json:"defer,omitempty" tf:"defer,omitempty"`

	// Hour of the day when you would like the maintenance window to start. This parameter uses the 24-hour clock, where midnight is 0, noon is 12 (Time zone is UTC).
	// +kubebuilder:validation:Optional
	HourOfDay *float64 `json:"hourOfDay,omitempty" tf:"hour_of_day,omitempty"`

	// Number of times the current maintenance event for this project has been deferred, you can set a maximum of 2 deferrals.
	// +kubebuilder:validation:Optional
	NumberOfDeferrals *float64 `json:"numberOfDeferrals,omitempty" tf:"number_of_deferrals,omitempty"`

	// The unique identifier of the project for the Maintenance Window.
	// +kubebuilder:validation:Optional
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`
}

// WindowSpec defines the desired state of Window
type WindowSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     WindowParameters `json:"forProvider"`
}

// WindowStatus defines the observed state of Window.
type WindowStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        WindowObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Window is the Schema for the Windows API. Provides an Maintenance Window resource.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,mongodbatlas}
type Window struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.projectId)",message="projectId is a required parameter"
	Spec   WindowSpec   `json:"spec"`
	Status WindowStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// WindowList contains a list of Windows
type WindowList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Window `json:"items"`
}

// Repository type metadata.
var (
	Window_Kind             = "Window"
	Window_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Window_Kind}.String()
	Window_KindAPIVersion   = Window_Kind + "." + CRDGroupVersion.String()
	Window_GroupVersionKind = CRDGroupVersion.WithKind(Window_Kind)
)

func init() {
	SchemeBuilder.Register(&Window{}, &WindowList{})
}
