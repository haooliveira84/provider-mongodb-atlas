/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type LinksObservation struct {
	Href *string `json:"href,omitempty" tf:"href,omitempty"`

	Rel *string `json:"rel,omitempty" tf:"rel,omitempty"`
}

type LinksParameters struct {
}

type ValidationsObservation struct {
	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	ValidationType *string `json:"validationType,omitempty" tf:"validation_type,omitempty"`
}

type ValidationsParameters struct {
}

type VerifyObservation struct {
	AuthzQueryTemplate *string `json:"authzQueryTemplate,omitempty" tf:"authz_query_template,omitempty"`

	BindPassword *string `json:"bindPassword,omitempty" tf:"bind_password,omitempty"`

	BindUsername *string `json:"bindUsername,omitempty" tf:"bind_username,omitempty"`

	CACertificate *string `json:"caCertificate,omitempty" tf:"ca_certificate,omitempty"`

	Hostname *string `json:"hostname,omitempty" tf:"hostname,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	Links []LinksObservation `json:"links,omitempty" tf:"links,omitempty"`

	Port *float64 `json:"port,omitempty" tf:"port,omitempty"`

	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	RequestID *string `json:"requestId,omitempty" tf:"request_id,omitempty"`

	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	Validations []ValidationsObservation `json:"validations,omitempty" tf:"validations,omitempty"`
}

type VerifyParameters struct {

	// +kubebuilder:validation:Optional
	AuthzQueryTemplate *string `json:"authzQueryTemplate,omitempty" tf:"authz_query_template,omitempty"`

	// +kubebuilder:validation:Optional
	BindPassword *string `json:"bindPassword,omitempty" tf:"bind_password,omitempty"`

	// +kubebuilder:validation:Optional
	BindUsername *string `json:"bindUsername,omitempty" tf:"bind_username,omitempty"`

	// +kubebuilder:validation:Optional
	CACertificate *string `json:"caCertificate,omitempty" tf:"ca_certificate,omitempty"`

	// +kubebuilder:validation:Optional
	Hostname *string `json:"hostname,omitempty" tf:"hostname,omitempty"`

	// +kubebuilder:validation:Optional
	Port *float64 `json:"port,omitempty" tf:"port,omitempty"`

	// +kubebuilder:validation:Optional
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`
}

// VerifySpec defines the desired state of Verify
type VerifySpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     VerifyParameters `json:"forProvider"`
}

// VerifyStatus defines the observed state of Verify.
type VerifyStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        VerifyObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Verify is the Schema for the Verifys API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,mongodbatlas}
type Verify struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.bindPassword)",message="bindPassword is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.bindUsername)",message="bindUsername is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.hostname)",message="hostname is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.port)",message="port is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.projectId)",message="projectId is a required parameter"
	Spec   VerifySpec   `json:"spec"`
	Status VerifyStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// VerifyList contains a list of Verifys
type VerifyList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Verify `json:"items"`
}

// Repository type metadata.
var (
	Verify_Kind             = "Verify"
	Verify_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Verify_Kind}.String()
	Verify_KindAPIVersion   = Verify_Kind + "." + CRDGroupVersion.String()
	Verify_GroupVersionKind = CRDGroupVersion.WithKind(Verify_Kind)
)

func init() {
	SchemeBuilder.Register(&Verify{}, &VerifyList{})
}
