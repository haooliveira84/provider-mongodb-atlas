/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type BackupSnapshotObservation struct {

	// Cloud provider that stores this snapshot. Atlas returns this parameter when type is replicaSet.
	CloudProvider *string `json:"cloudProvider,omitempty" tf:"cloud_provider,omitempty"`

	// The name of the Atlas cluster that contains the snapshots you want to retrieve.
	ClusterName *string `json:"clusterName,omitempty" tf:"cluster_name,omitempty"`

	// UTC ISO 8601 formatted point in time when Atlas took the snapshot.
	CreatedAt *string `json:"createdAt,omitempty" tf:"created_at,omitempty"`

	// Description of the on-demand snapshot.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// UTC ISO 8601 formatted point in time when Atlas will delete the snapshot.
	ExpiresAt *string `json:"expiresAt,omitempty" tf:"expires_at,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Unique ID of the AWS KMS Customer Master Key used to encrypt the snapshot. Only visible for clusters using Encryption at Rest via Customer KMS.
	MasterKeyUUID *string `json:"masterKeyUuid,omitempty" tf:"master_key_uuid,omitempty"`

	// Block of List of snapshots and the cloud provider where the snapshots are stored. Atlas returns this parameter when type is shardedCluster. See below
	Members []MembersObservation `json:"members,omitempty" tf:"members,omitempty"`

	// Version of the MongoDB server.
	MongodVersion *string `json:"mongodVersion,omitempty" tf:"mongod_version,omitempty"`

	// The unique identifier of the project for the Atlas cluster.
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// Label given to the replica set from which Atlas took this snapshot. Atlas returns this parameter when type is replicaSet.
	ReplicaSetName *string `json:"replicaSetName,omitempty" tf:"replica_set_name,omitempty"`

	// The number of days that Atlas should retain the on-demand snapshot. Must be at least 1.
	RetentionInDays *float64 `json:"retentionInDays,omitempty" tf:"retention_in_days,omitempty"`

	// Unique identifier of the snapshot.
	SnapshotID *string `json:"snapshotId,omitempty" tf:"snapshot_id,omitempty"`

	// Unique identifiers of the snapshots created for the shards and config server for a sharded cluster. Atlas returns this parameter when type is shardedCluster. These identifiers should match those given in the members[n].id parameters. This allows you to map a snapshot to its shard or config server name.
	SnapshotIds []*string `json:"snapshotIds,omitempty" tf:"snapshot_ids,omitempty"`

	// Specified the type of snapshot. Valid values are onDemand and scheduled.
	SnapshotType *string `json:"snapshotType,omitempty" tf:"snapshot_type,omitempty"`

	// Current status of the snapshot. One of the following values will be returned: queued, inProgress, completed, failed.
	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	// Specifies the size of the snapshot in bytes.
	StorageSizeBytes *float64 `json:"storageSizeBytes,omitempty" tf:"storage_size_bytes,omitempty"`

	// Specifies the type of cluster: replicaSet or shardedCluster.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type BackupSnapshotParameters struct {

	// The name of the Atlas cluster that contains the snapshots you want to retrieve.
	// +kubebuilder:validation:Optional
	ClusterName *string `json:"clusterName,omitempty" tf:"cluster_name,omitempty"`

	// Description of the on-demand snapshot.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The unique identifier of the project for the Atlas cluster.
	// +kubebuilder:validation:Optional
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// The number of days that Atlas should retain the on-demand snapshot. Must be at least 1.
	// +kubebuilder:validation:Optional
	RetentionInDays *float64 `json:"retentionInDays,omitempty" tf:"retention_in_days,omitempty"`
}

type MembersObservation struct {

	// Cloud provider that stores this snapshot.
	CloudProvider *string `json:"cloudProvider,omitempty" tf:"cloud_provider,omitempty"`

	// Unique identifier for the sharded cluster snapshot.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Label given to a shard or config server from which Atlas took this snapshot.
	ReplicaSetName *string `json:"replicaSetName,omitempty" tf:"replica_set_name,omitempty"`
}

type MembersParameters struct {
}

// BackupSnapshotSpec defines the desired state of BackupSnapshot
type BackupSnapshotSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     BackupSnapshotParameters `json:"forProvider"`
}

// BackupSnapshotStatus defines the observed state of BackupSnapshot.
type BackupSnapshotStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        BackupSnapshotObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// BackupSnapshot is the Schema for the BackupSnapshots API. Provides a Cloud Backup Snapshot resource.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,mongodbatlas}
type BackupSnapshot struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.clusterName)",message="clusterName is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.description)",message="description is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.projectId)",message="projectId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.retentionInDays)",message="retentionInDays is a required parameter"
	Spec   BackupSnapshotSpec   `json:"spec"`
	Status BackupSnapshotStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// BackupSnapshotList contains a list of BackupSnapshots
type BackupSnapshotList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []BackupSnapshot `json:"items"`
}

// Repository type metadata.
var (
	BackupSnapshot_Kind             = "BackupSnapshot"
	BackupSnapshot_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: BackupSnapshot_Kind}.String()
	BackupSnapshot_KindAPIVersion   = BackupSnapshot_Kind + "." + CRDGroupVersion.String()
	BackupSnapshot_GroupVersionKind = CRDGroupVersion.WithKind(BackupSnapshot_Kind)
)

func init() {
	SchemeBuilder.Register(&BackupSnapshot{}, &BackupSnapshotList{})
}
