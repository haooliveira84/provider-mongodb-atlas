/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AtRestObservation struct {
	AwsKMSConfig []AwsKMSConfigObservation `json:"awsKmsConfig,omitempty" tf:"aws_kms_config,omitempty"`

	AzureKeyVaultConfig []AzureKeyVaultConfigObservation `json:"azureKeyVaultConfig,omitempty" tf:"azure_key_vault_config,omitempty"`

	GoogleCloudKMSConfig []GoogleCloudKMSConfigObservation `json:"googleCloudKmsConfig,omitempty" tf:"google_cloud_kms_config,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The unique identifier for the project.
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`
}

type AtRestParameters struct {

	// +kubebuilder:validation:Optional
	AwsKMSConfig []AwsKMSConfigParameters `json:"awsKmsConfig,omitempty" tf:"aws_kms_config,omitempty"`

	// Specifies AWS KMS configuration details and whether Encryption at Rest is enabled for an Atlas project.
	// +kubebuilder:validation:Optional
	AwsKMSSecretRef *v1.SecretReference `json:"awsKmsSecretRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	AzureKeyVaultConfig []AzureKeyVaultConfigParameters `json:"azureKeyVaultConfig,omitempty" tf:"azure_key_vault_config,omitempty"`

	// Specifies Azure Key Vault configuration details and whether Encryption at Rest is enabled for an Atlas project.
	// +kubebuilder:validation:Optional
	AzureKeyVaultSecretRef *v1.SecretReference `json:"azureKeyVaultSecretRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	GoogleCloudKMSConfig []GoogleCloudKMSConfigParameters `json:"googleCloudKmsConfig,omitempty" tf:"google_cloud_kms_config,omitempty"`

	// Specifies GCP KMS configuration details and whether Encryption at Rest is enabled for an Atlas project.
	// +kubebuilder:validation:Optional
	GoogleCloudKMSSecretRef *v1.SecretReference `json:"googleCloudKmsSecretRef,omitempty" tf:"-"`

	// The unique identifier for the project.
	// +kubebuilder:validation:Optional
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`
}

type AwsKMSConfigObservation struct {

	// Specifies whether Encryption at Rest is enabled for an Atlas project, To disable Encryption at Rest, pass only this parameter with a value of false, When you disable Encryption at Rest, Atlas also removes the configuration details.
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// The AWS region in which the AWS customer master key exists: CA_CENTRAL_1, US_EAST_1, US_EAST_2, US_WEST_1, US_WEST_2, SA_EAST_1
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// ID of an AWS IAM role authorized to manage an AWS customer master key. To find the ID for an existing IAM role check the role_id attribute of the mongodbatlas_cloud_provider_access resource.
	RoleID *string `json:"roleId,omitempty" tf:"role_id,omitempty"`
}

type AwsKMSConfigParameters struct {

	// +kubebuilder:validation:Optional
	AccessKeyIDSecretRef *v1.SecretKeySelector `json:"accessKeyIdSecretRef,omitempty" tf:"-"`

	// The AWS customer master key used to encrypt and decrypt the MongoDB master keys.
	// +kubebuilder:validation:Optional
	CustomerMasterKeyIDSecretRef *v1.SecretKeySelector `json:"customerMasterKeyIdSecretRef,omitempty" tf:"-"`

	// Specifies whether Encryption at Rest is enabled for an Atlas project, To disable Encryption at Rest, pass only this parameter with a value of false, When you disable Encryption at Rest, Atlas also removes the configuration details.
	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// The AWS region in which the AWS customer master key exists: CA_CENTRAL_1, US_EAST_1, US_EAST_2, US_WEST_1, US_WEST_2, SA_EAST_1
	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// ID of an AWS IAM role authorized to manage an AWS customer master key. To find the ID for an existing IAM role check the role_id attribute of the mongodbatlas_cloud_provider_access resource.
	// +kubebuilder:validation:Optional
	RoleID *string `json:"roleId,omitempty" tf:"role_id,omitempty"`

	// +kubebuilder:validation:Optional
	SecretAccessKeySecretRef *v1.SecretKeySelector `json:"secretAccessKeySecretRef,omitempty" tf:"-"`
}

type AzureKeyVaultConfigObservation struct {

	// The Azure environment where the Azure account credentials reside. Valid values are the following: AZURE, AZURE_CHINA, AZURE_GERMANY
	AzureEnvironment *string `json:"azureEnvironment,omitempty" tf:"azure_environment,omitempty"`

	// Specifies whether Encryption at Rest is enabled for an Atlas project, To disable Encryption at Rest, pass only this parameter with a value of false, When you disable Encryption at Rest, Atlas also removes the configuration details.
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// The name of an Azure Key Vault containing your key.
	KeyVaultName *string `json:"keyVaultName,omitempty" tf:"key_vault_name,omitempty"`

	// The name of the Azure Resource group that contains an Azure Key Vault.
	ResourceGroupName *string `json:"resourceGroupName,omitempty" tf:"resource_group_name,omitempty"`
}

type AzureKeyVaultConfigParameters struct {

	// The Azure environment where the Azure account credentials reside. Valid values are the following: AZURE, AZURE_CHINA, AZURE_GERMANY
	// +kubebuilder:validation:Optional
	AzureEnvironment *string `json:"azureEnvironment,omitempty" tf:"azure_environment,omitempty"`

	// The client ID, also known as the application ID, for an Azure application associated with the Azure AD tenant.
	// +kubebuilder:validation:Optional
	ClientIDSecretRef *v1.SecretKeySelector `json:"clientIdSecretRef,omitempty" tf:"-"`

	// Specifies whether Encryption at Rest is enabled for an Atlas project, To disable Encryption at Rest, pass only this parameter with a value of false, When you disable Encryption at Rest, Atlas also removes the configuration details.
	// +kubebuilder:validation:Required
	Enabled *bool `json:"enabled" tf:"enabled,omitempty"`

	// The unique identifier of a key in an Azure Key Vault.
	// +kubebuilder:validation:Optional
	KeyIdentifierSecretRef *v1.SecretKeySelector `json:"keyIdentifierSecretRef,omitempty" tf:"-"`

	// The name of an Azure Key Vault containing your key.
	// +kubebuilder:validation:Optional
	KeyVaultName *string `json:"keyVaultName,omitempty" tf:"key_vault_name,omitempty"`

	// The name of the Azure Resource group that contains an Azure Key Vault.
	// +kubebuilder:validation:Optional
	ResourceGroupName *string `json:"resourceGroupName,omitempty" tf:"resource_group_name,omitempty"`

	// The secret associated with the Azure Key Vault specified by azureKeyVault.tenantID.
	// +kubebuilder:validation:Optional
	SecretSecretRef *v1.SecretKeySelector `json:"secretSecretRef,omitempty" tf:"-"`

	// The unique identifier associated with an Azure subscription.
	// +kubebuilder:validation:Optional
	SubscriptionIDSecretRef *v1.SecretKeySelector `json:"subscriptionIdSecretRef,omitempty" tf:"-"`

	// The unique identifier for an Azure AD tenant within an Azure subscription.
	// +kubebuilder:validation:Optional
	TenantIDSecretRef *v1.SecretKeySelector `json:"tenantIdSecretRef,omitempty" tf:"-"`
}

type GoogleCloudKMSConfigObservation struct {

	// Specifies whether Encryption at Rest is enabled for an Atlas project, To disable Encryption at Rest, pass only this parameter with a value of false, When you disable Encryption at Rest, Atlas also removes the configuration details.
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`
}

type GoogleCloudKMSConfigParameters struct {

	// Specifies whether Encryption at Rest is enabled for an Atlas project, To disable Encryption at Rest, pass only this parameter with a value of false, When you disable Encryption at Rest, Atlas also removes the configuration details.
	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// The Key Version Resource ID from your GCP account.
	// +kubebuilder:validation:Optional
	KeyVersionResourceIDSecretRef *v1.SecretKeySelector `json:"keyVersionResourceIdSecretRef,omitempty" tf:"-"`

	// String-formatted JSON object containing GCP KMS credentials from your GCP account.
	// +kubebuilder:validation:Optional
	ServiceAccountKeySecretRef *v1.SecretKeySelector `json:"serviceAccountKeySecretRef,omitempty" tf:"-"`
}

// AtRestSpec defines the desired state of AtRest
type AtRestSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     AtRestParameters `json:"forProvider"`
}

// AtRestStatus defines the observed state of AtRest.
type AtRestStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        AtRestObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// AtRest is the Schema for the AtRests API. Provides an Encryption At Rest resource.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,mongodbatlas}
type AtRest struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.projectId)",message="projectId is a required parameter"
	Spec   AtRestSpec   `json:"spec"`
	Status AtRestStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// AtRestList contains a list of AtRests
type AtRestList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []AtRest `json:"items"`
}

// Repository type metadata.
var (
	AtRest_Kind             = "AtRest"
	AtRest_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: AtRest_Kind}.String()
	AtRest_KindAPIVersion   = AtRest_Kind + "." + CRDGroupVersion.String()
	AtRest_GroupVersionKind = CRDGroupVersion.WithKind(AtRest_Kind)
)

func init() {
	SchemeBuilder.Register(&AtRest{}, &AtRestList{})
}
