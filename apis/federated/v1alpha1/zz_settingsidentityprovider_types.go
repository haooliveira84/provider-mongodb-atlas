/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type SettingsIdentityProviderObservation struct {

	// List that contains the domains associated with the identity provider.
	AssociatedDomains []*string `json:"associatedDomains,omitempty" tf:"associated_domains,omitempty"`

	// Unique 24-hexadecimal digit string that identifies the federated authentication configuration.
	FederationSettingsID *string `json:"federationSettingsId,omitempty" tf:"federation_settings_id,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Unique string that identifies the issuer of the SAML
	IssuerURI *string `json:"issuerUri,omitempty" tf:"issuer_uri,omitempty"`

	// Unique 20-hexadecimal digit string that identifies the IdP.
	OktaIdpID *string `json:"oktaIdpId,omitempty" tf:"okta_idp_id,omitempty"`

	// SAML Authentication Request Protocol HTTP method binding (POST or REDIRECT) that Federated Authentication uses to send the authentication request. Atlas supports the following binding values:
	RequestBinding *string `json:"requestBinding,omitempty" tf:"request_binding,omitempty"`

	// Signature algorithm that Federated Authentication uses to encrypt the identity provider signature.  Valid values include SHA-1 and SHA-256.
	ResponseSignatureAlgorithm *string `json:"responseSignatureAlgorithm,omitempty" tf:"response_signature_algorithm,omitempty"`

	// Flag that indicates whether the identity provider has SSO debug enabled.
	SsoDebugEnabled *bool `json:"ssoDebugEnabled,omitempty" tf:"sso_debug_enabled,omitempty"`

	// Unique string that identifies the intended audience of the SAML assertion.
	SsoURL *string `json:"ssoUrl,omitempty" tf:"sso_url,omitempty"`

	// String enum that indicates whether the identity provider is active or not. Accepted values are ACTIVE or INACTIVE.
	Status *string `json:"status,omitempty" tf:"status,omitempty"`
}

type SettingsIdentityProviderParameters struct {

	// List that contains the domains associated with the identity provider.
	// +kubebuilder:validation:Optional
	AssociatedDomains []*string `json:"associatedDomains,omitempty" tf:"associated_domains,omitempty"`

	// Unique 24-hexadecimal digit string that identifies the federated authentication configuration.
	// +kubebuilder:validation:Optional
	FederationSettingsID *string `json:"federationSettingsId,omitempty" tf:"federation_settings_id,omitempty"`

	// Unique string that identifies the issuer of the SAML
	// +kubebuilder:validation:Optional
	IssuerURI *string `json:"issuerUri,omitempty" tf:"issuer_uri,omitempty"`

	// SAML Authentication Request Protocol HTTP method binding (POST or REDIRECT) that Federated Authentication uses to send the authentication request. Atlas supports the following binding values:
	// +kubebuilder:validation:Optional
	RequestBinding *string `json:"requestBinding,omitempty" tf:"request_binding,omitempty"`

	// Signature algorithm that Federated Authentication uses to encrypt the identity provider signature.  Valid values include SHA-1 and SHA-256.
	// +kubebuilder:validation:Optional
	ResponseSignatureAlgorithm *string `json:"responseSignatureAlgorithm,omitempty" tf:"response_signature_algorithm,omitempty"`

	// Flag that indicates whether the identity provider has SSO debug enabled.
	// +kubebuilder:validation:Optional
	SsoDebugEnabled *bool `json:"ssoDebugEnabled,omitempty" tf:"sso_debug_enabled,omitempty"`

	// Unique string that identifies the intended audience of the SAML assertion.
	// +kubebuilder:validation:Optional
	SsoURL *string `json:"ssoUrl,omitempty" tf:"sso_url,omitempty"`

	// String enum that indicates whether the identity provider is active or not. Accepted values are ACTIVE or INACTIVE.
	// +kubebuilder:validation:Optional
	Status *string `json:"status,omitempty" tf:"status,omitempty"`
}

// SettingsIdentityProviderSpec defines the desired state of SettingsIdentityProvider
type SettingsIdentityProviderSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     SettingsIdentityProviderParameters `json:"forProvider"`
}

// SettingsIdentityProviderStatus defines the observed state of SettingsIdentityProvider.
type SettingsIdentityProviderStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        SettingsIdentityProviderObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// SettingsIdentityProvider is the Schema for the SettingsIdentityProviders API. Provides a federated settings Identity Provider resource.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,mongodbatlas}
type SettingsIdentityProvider struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.federationSettingsId)",message="federationSettingsId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.issuerUri)",message="issuerUri is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.requestBinding)",message="requestBinding is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.responseSignatureAlgorithm)",message="responseSignatureAlgorithm is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.ssoDebugEnabled)",message="ssoDebugEnabled is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.ssoUrl)",message="ssoUrl is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.status)",message="status is a required parameter"
	Spec   SettingsIdentityProviderSpec   `json:"spec"`
	Status SettingsIdentityProviderStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// SettingsIdentityProviderList contains a list of SettingsIdentityProviders
type SettingsIdentityProviderList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []SettingsIdentityProvider `json:"items"`
}

// Repository type metadata.
var (
	SettingsIdentityProvider_Kind             = "SettingsIdentityProvider"
	SettingsIdentityProvider_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: SettingsIdentityProvider_Kind}.String()
	SettingsIdentityProvider_KindAPIVersion   = SettingsIdentityProvider_Kind + "." + CRDGroupVersion.String()
	SettingsIdentityProvider_GroupVersionKind = CRDGroupVersion.WithKind(SettingsIdentityProvider_Kind)
)

func init() {
	SchemeBuilder.Register(&SettingsIdentityProvider{}, &SettingsIdentityProviderList{})
}
