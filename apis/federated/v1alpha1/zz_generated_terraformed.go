/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	"github.com/pkg/errors"

	"github.com/upbound/upjet/pkg/resource"
	"github.com/upbound/upjet/pkg/resource/json"
)

// GetTerraformResourceType returns Terraform resource type for this DatabaseInstance
func (mg *DatabaseInstance) GetTerraformResourceType() string {
	return "mongodbatlas_federated_database_instance"
}

// GetConnectionDetailsMapping for this DatabaseInstance
func (tr *DatabaseInstance) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this DatabaseInstance
func (tr *DatabaseInstance) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this DatabaseInstance
func (tr *DatabaseInstance) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this DatabaseInstance
func (tr *DatabaseInstance) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this DatabaseInstance
func (tr *DatabaseInstance) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this DatabaseInstance
func (tr *DatabaseInstance) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this DatabaseInstance using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *DatabaseInstance) LateInitialize(attrs []byte) (bool, error) {
	params := &DatabaseInstanceParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *DatabaseInstance) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this QueryLimit
func (mg *QueryLimit) GetTerraformResourceType() string {
	return "mongodbatlas_federated_query_limit"
}

// GetConnectionDetailsMapping for this QueryLimit
func (tr *QueryLimit) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this QueryLimit
func (tr *QueryLimit) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this QueryLimit
func (tr *QueryLimit) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this QueryLimit
func (tr *QueryLimit) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this QueryLimit
func (tr *QueryLimit) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this QueryLimit
func (tr *QueryLimit) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this QueryLimit using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *QueryLimit) LateInitialize(attrs []byte) (bool, error) {
	params := &QueryLimitParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *QueryLimit) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this SettingsIdentityProvider
func (mg *SettingsIdentityProvider) GetTerraformResourceType() string {
	return "mongodbatlas_federated_settings_identity_provider"
}

// GetConnectionDetailsMapping for this SettingsIdentityProvider
func (tr *SettingsIdentityProvider) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this SettingsIdentityProvider
func (tr *SettingsIdentityProvider) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this SettingsIdentityProvider
func (tr *SettingsIdentityProvider) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this SettingsIdentityProvider
func (tr *SettingsIdentityProvider) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this SettingsIdentityProvider
func (tr *SettingsIdentityProvider) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this SettingsIdentityProvider
func (tr *SettingsIdentityProvider) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this SettingsIdentityProvider using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *SettingsIdentityProvider) LateInitialize(attrs []byte) (bool, error) {
	params := &SettingsIdentityProviderParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *SettingsIdentityProvider) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this SettingsOrgConfig
func (mg *SettingsOrgConfig) GetTerraformResourceType() string {
	return "mongodbatlas_federated_settings_org_config"
}

// GetConnectionDetailsMapping for this SettingsOrgConfig
func (tr *SettingsOrgConfig) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this SettingsOrgConfig
func (tr *SettingsOrgConfig) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this SettingsOrgConfig
func (tr *SettingsOrgConfig) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this SettingsOrgConfig
func (tr *SettingsOrgConfig) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this SettingsOrgConfig
func (tr *SettingsOrgConfig) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this SettingsOrgConfig
func (tr *SettingsOrgConfig) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this SettingsOrgConfig using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *SettingsOrgConfig) LateInitialize(attrs []byte) (bool, error) {
	params := &SettingsOrgConfigParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *SettingsOrgConfig) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this SettingsOrgRoleMapping
func (mg *SettingsOrgRoleMapping) GetTerraformResourceType() string {
	return "mongodbatlas_federated_settings_org_role_mapping"
}

// GetConnectionDetailsMapping for this SettingsOrgRoleMapping
func (tr *SettingsOrgRoleMapping) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this SettingsOrgRoleMapping
func (tr *SettingsOrgRoleMapping) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this SettingsOrgRoleMapping
func (tr *SettingsOrgRoleMapping) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this SettingsOrgRoleMapping
func (tr *SettingsOrgRoleMapping) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this SettingsOrgRoleMapping
func (tr *SettingsOrgRoleMapping) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this SettingsOrgRoleMapping
func (tr *SettingsOrgRoleMapping) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this SettingsOrgRoleMapping using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *SettingsOrgRoleMapping) LateInitialize(attrs []byte) (bool, error) {
	params := &SettingsOrgRoleMappingParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *SettingsOrgRoleMapping) GetTerraformSchemaVersion() int {
	return 0
}
