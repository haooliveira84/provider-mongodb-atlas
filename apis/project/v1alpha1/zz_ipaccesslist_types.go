/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type IPAccessListObservation struct {

	// Unique identifier of the AWS security group to add to the access list. Your access list entry can include only one awsSecurityGroup, one cidrBlock, or one ipAddress.
	AwsSecurityGroup *string `json:"awsSecurityGroup,omitempty" tf:"aws_security_group,omitempty"`

	// Range of IP addresses in CIDR notation to be added to the access list. Your access list entry can include only one awsSecurityGroup, one cidrBlock, or one ipAddress.
	CidrBlock *string `json:"cidrBlock,omitempty" tf:"cidr_block,omitempty"`

	// Comment to add to the access list entry.
	Comment *string `json:"comment,omitempty" tf:"comment,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Single IP address to be added to the access list. Mutually exclusive with awsSecurityGroup and cidrBlock.
	IPAddress *string `json:"ipAddress,omitempty" tf:"ip_address,omitempty"`

	// Unique identifier for the project to which you want to add one or more access list entries.
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`
}

type IPAccessListParameters struct {

	// Unique identifier of the AWS security group to add to the access list. Your access list entry can include only one awsSecurityGroup, one cidrBlock, or one ipAddress.
	// +kubebuilder:validation:Optional
	AwsSecurityGroup *string `json:"awsSecurityGroup,omitempty" tf:"aws_security_group,omitempty"`

	// Range of IP addresses in CIDR notation to be added to the access list. Your access list entry can include only one awsSecurityGroup, one cidrBlock, or one ipAddress.
	// +kubebuilder:validation:Optional
	CidrBlock *string `json:"cidrBlock,omitempty" tf:"cidr_block,omitempty"`

	// Comment to add to the access list entry.
	// +kubebuilder:validation:Optional
	Comment *string `json:"comment,omitempty" tf:"comment,omitempty"`

	// Single IP address to be added to the access list. Mutually exclusive with awsSecurityGroup and cidrBlock.
	// +kubebuilder:validation:Optional
	IPAddress *string `json:"ipAddress,omitempty" tf:"ip_address,omitempty"`

	// Unique identifier for the project to which you want to add one or more access list entries.
	// +kubebuilder:validation:Optional
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`
}

// IPAccessListSpec defines the desired state of IPAccessList
type IPAccessListSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     IPAccessListParameters `json:"forProvider"`
}

// IPAccessListStatus defines the observed state of IPAccessList.
type IPAccessListStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        IPAccessListObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// IPAccessList is the Schema for the IPAccessLists API. Provides an IP Access List resource.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,mongodbatlas}
type IPAccessList struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.projectId)",message="projectId is a required parameter"
	Spec   IPAccessListSpec   `json:"spec"`
	Status IPAccessListStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// IPAccessListList contains a list of IPAccessLists
type IPAccessListList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []IPAccessList `json:"items"`
}

// Repository type metadata.
var (
	IPAccessList_Kind             = "IPAccessList"
	IPAccessList_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: IPAccessList_Kind}.String()
	IPAccessList_KindAPIVersion   = IPAccessList_Kind + "." + CRDGroupVersion.String()
	IPAccessList_GroupVersionKind = CRDGroupVersion.WithKind(IPAccessList_Kind)
)

func init() {
	SchemeBuilder.Register(&IPAccessList{}, &IPAccessListList{})
}
